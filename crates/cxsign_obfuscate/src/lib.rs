use proc_macro::TokenStream;
use quote::quote;

const _10: [u32; 64] = [
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
    0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
    0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
    0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
    0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391,
];
const _11: [u32; 16] = [
    0x07, 0x0c, 0x11, 0x16, 0x05, 0x09, 0x0e, 0x14, 0x04, 0x0b, 0x10, 0x17, 0x06, 0x0a, 0x0f, 0x15,
];
const _12: [usize; 64] = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x01, 0x06, 0x0b, 0x00, 0x05, 0x0a, 0x0f, 0x04, 0x09, 0x0e, 0x03, 0x08, 0x0d, 0x02, 0x07, 0x0c,
    0x05, 0x08, 0x0b, 0x0e, 0x01, 0x04, 0x07, 0x0a, 0x0d, 0x00, 0x03, 0x06, 0x09, 0x0c, 0x0f, 0x02,
    0x00, 0x07, 0x0e, 0x05, 0x0c, 0x03, 0x0a, 0x01, 0x08, 0x0f, 0x06, 0x0d, 0x04, 0x0b, 0x02, 0x09,
];
static _00: [u8; 344] = [
    120, 156, 173, 145, 109, 75, 195, 48, 16, 199, 223, 247, 83, 220, 16, 36, 193, 56, 250, 180,
    238, 209, 193, 4, 17, 223, 248, 98, 239, 164, 212, 146, 166, 205, 44, 180, 217, 216, 58, 55,
    113, 126, 119, 47, 217, 230, 64, 236, 148, 205, 208, 114, 151, 228, 238, 254, 191, 187, 88, 23,
    97, 174, 138, 92, 101, 132, 23, 43, 254, 182, 160, 145, 37, 21, 196, 210, 142, 9, 239, 193,
    210, 115, 25, 36, 198, 82, 184, 30, 106, 11, 239, 22, 224, 226, 205, 213, 156, 207, 102, 185,
    154, 196, 60, 77, 73, 66, 173, 15, 171, 174, 212, 241, 74, 69, 86, 129, 128, 27, 32, 28, 46,
    193, 94, 75, 92, 20, 174, 128, 36, 135, 109, 223, 4, 18, 140, 24, 14, 193, 9, 118, 215, 7, 95,
    236, 253, 193, 192, 152, 141, 62, 250, 202, 174, 35, 251, 13, 108, 59, 4, 188, 212, 21, 196,
    84, 45, 42, 184, 189, 187, 127, 120, 140, 71, 227, 241, 232, 169, 7, 33, 134, 246, 193, 143,
    144, 61, 180, 215, 65, 219, 111, 185, 158, 237, 48, 148, 205, 164, 72, 121, 210, 233, 106, 191,
    219, 73, 120, 42, 100, 166, 125, 199, 246, 220, 150, 223, 14, 162, 126, 13, 145, 67, 66, 45,
    200, 64, 48, 120, 229, 197, 18, 179, 22, 47, 185, 172, 24, 148, 124, 146, 139, 104, 47, 26, 68,
    63, 12, 49, 65, 16, 236, 9, 63, 44, 192, 41, 211, 155, 93, 17, 147, 77, 119, 115, 212, 1, 205,
    249, 180, 226, 85, 22, 23, 153, 172, 136, 145, 192, 120, 81, 63, 42, 151, 132, 91, 170, 146,
    129, 58, 206, 214, 254, 206, 166, 187, 50, 239, 81, 154, 151, 105, 104, 87, 209, 99, 109, 214,
    115, 120, 255, 193, 161, 12, 71, 137, 94, 227, 84, 14, 255, 76, 14, 1, 207, 80, 226, 175, 78,
    147, 111, 157, 41, 175, 165, 113, 20, 155, 191, 12, 224, 19, 24, 160, 37, 67,
];
static _01: [u8; 242] = [
    120, 156, 109, 80, 193, 74, 196, 48, 16, 189, 247, 43, 222, 69, 72, 20, 67, 183, 171, 178, 218,
    109, 97, 5, 17, 47, 30, 246, 38, 34, 33, 117, 167, 18, 168, 109, 105, 19, 141, 218, 253, 119,
    147, 85, 43, 213, 157, 203, 36, 51, 111, 222, 155, 55, 17, 190, 163, 34, 3, 135, 204, 231, 26,
    135, 88, 164, 209, 79, 67, 215, 173, 53, 247, 14, 121, 142, 211, 7, 12, 25, 102, 201, 2, 203,
    165, 7, 31, 96, 158, 252, 226, 2, 193, 139, 170, 44, 73, 101, 60, 207, 160, 47, 96, 123, 253,
    78, 3, 142, 115, 216, 121, 130, 143, 17, 186, 163, 45, 161, 145, 101, 136, 93, 76, 56, 2, 99,
    204, 249, 116, 118, 194, 131, 208, 57, 15, 10, 254, 61, 157, 9, 225, 160, 250, 64, 55, 105,
    108, 65, 85, 79, 123, 208, 187, 229, 197, 19, 25, 166, 185, 120, 108, 90, 77, 27, 198, 133,
    173, 95, 59, 213, 202, 166, 147, 27, 42, 149, 173, 12, 227, 83, 186, 241, 183, 157, 250, 123,
    182, 6, 202, 155, 187, 188, 186, 190, 185, 149, 171, 245, 122, 117, 247, 31, 80, 164, 209, 88,
    43, 155, 206, 219, 212, 53, 88, 44, 196, 215, 50, 254, 192, 140, 115, 209, 27, 106, 101, 241,
    198, 98, 55, 139, 255, 250, 44, 188, 132, 74, 163, 79, 134, 223, 96, 55,
];
static _02: [u8; 68] = [
    120, 156, 101, 138, 43, 10, 64, 33, 20, 5, 251, 93, 197, 137, 239, 129, 136, 193, 38, 174, 68,
    12, 26, 132, 91, 20, 172, 226, 222, 21, 147, 159, 73, 51, 48, 132, 141, 84, 42, 24, 156, 161,
    164, 212, 104, 132, 139, 224, 216, 195, 34, 169, 47, 78, 19, 171, 127, 115, 108, 157, 94, 11,
    52, 0, 252, 156, 19, 76,
];
fn f0() -> String {
    let mut x = String::new();
    for i in 0..64 {
        let a = (4 - i % 4) % 4;
        let b = (5 - i % 4) % 4;
        let c = (6 - i % 4) % 4;
        let d = (7 - i % 4) % 4;
        let e = _12[i];
        let f = _11[i % 4 + ((i >> 4) << 2)];
        let g = _10[i];
        let h = match i / 16 {
            0 => "f2",
            1 => "f3",
            2 => "f4",
            3 => "f5",
            _ => {
                unreachable!()
            }
        };
        x.push_str(&format!(
            "a[{a}]={h}([a[{a}],a[{b}],a[{c}],a[{d}],value_at(i+{e}),{f},{g}]);",
        ))
    }
    x
}
#[proc_macro]
pub fn __define(_input: TokenStream) -> TokenStream {
    use cxsign_utils::zlib_decode;
    let r = zlib_decode(&_00[..]) + &zlib_decode(&_01[..]) + &f0() + &zlib_decode(&_02[..]);
    let mut tokens = proc_macro2::TokenStream::new();
    let token: proc_macro2::TokenStream = r.parse().unwrap();
    tokens.extend(quote! {
        fn hash_(mut input: Vec<u32>, len: usize) -> [u32; 4] {
            #token
        }
    });
    tokens.into()
}
